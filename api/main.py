"""
API REST FastAPI pour le g√©n√©rateur de noms de domaine.

Cette API expose les fonctionnalit√©s du syst√®me de g√©n√©ration
et d'√©valuation de noms de domaine via des endpoints REST.
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.openapi.utils import get_openapi

from schemas import *
from src.generateur_nom_domaine import GenerateurNomsDomaine
from src.evaluateur_llm import EvaluateurLLM
from src.garde_fous import GardeFousSecurite
from src.utils import load_config

import time
import logging
from contextlib import asynccontextmanager
from typing import Dict, Any

logging.basicConfig(level=logging.INFO)
api_logger = logging.getLogger("api")

# Variables globales pour les services
generateur = None
evaluateur = None
garde_fous = None
config = None
statistiques_api = {
    "total_requests": 0,
    "successful_generations": 0,
    "blocked_requests": 0,
    "error_requests": 0,
    "start_time": time.time()
}

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire de cycle de vie de l'application."""
    # D√©marrage
    global generateur, evaluateur, garde_fous, config
    
    api_logger.info("üöÄ D√©marrage du g√©n√©rateur de noms de domaine API...")
    
    try:
        # Charger la configuration
        config = load_config()
        api_logger.info("Configuration charg√©e")
        
        # Initialiser les services
        generateur = GenerateurNomsDomaine(garde_fous=True)
        api_logger.info("G√©n√©rateur initialis√©")
        
        evaluateur = EvaluateurLLM(type_evaluateur="ollama")
        api_logger.info("√âvaluateur initialis√©")
        
        garde_fous = GardeFousSecurite()
        api_logger.info("Garde-fous initialis√©s")
        
        api_logger.info("API pr√™te √† recevoir des requ√™tes")
        
    except Exception as e:
        api_logger.error(f"Erreur lors de l'initialisation: {e}")
        raise
    
    yield
    
    # Arr√™t
    api_logger.info("Arr√™t de l'API")


# Cr√©er l'application FastAPI
app = FastAPI(
    title="G√©n√©rateur de Noms de Domaine LLM",
    description="""
    API REST pour la g√©n√©ration et l'√©valuation automatis√©es de noms de domaine 
    utilisant des mod√®les de langage (LLM).
    
    ## Fonctionnalit√©s
    
    - **G√©n√©ration**: Cr√©ation de suggestions de noms de domaine bas√©es sur une description business
    - **√âvaluation**: Analyse automatis√©e de la qualit√© des noms de domaine
    - **S√©curit√©**: Filtrage de contenu inappropri√© avec garde-fous int√©gr√©s
    - **Comparaison**: Comparaison de diff√©rentes versions de suggestions
    
    ## Mod√®les Utilis√©s
    
    - **G√©n√©rateur**: Llama3.1 via Ollama
    - **√âvaluateur**: LLM-as-a-Judge pour l'√©valuation automatique
    - **S√©curit√©**: Syst√®me de filtrage personnalis√©
    """,
    version="1.0.0",
    contact={
        "name": "AI Engineer",
        "email": "ai-engineer@example.com"
    },
    license_info={
        "name": "MIT License"
    },
    lifespan=lifespan
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Middleware pour les statistiques
@app.middleware("http")
async def statistiques_middleware(request: Request, call_next):
    """Middleware pour collecter les statistiques d'utilisation."""
    global statistiques_api
    
    start_time = time.time()
    statistiques_api["total_requests"] += 1
    
    response = await call_next(request)
    
    # Enregistrer les m√©triques
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    
    return response


# Gestionnaire d'erreurs global
@app.exception_handler(Exception)
async def gestionnaire_erreur_global(request: Request, exc: Exception):
    """Gestionnaire d'erreurs global pour l'API."""
    global statistiques_api
    statistiques_api["error_requests"] += 1
    
    api_logger.error(f"Erreur non g√©r√©e: {exc}")
    
    return JSONResponse(
        status_code=500,
        content={
            "status": "error",
            "message": "Erreur interne du serveur",
            "code_erreur": "INTERNAL_ERROR",
            "timestamp": time.time()
        }
    )


# ENDPOINTS PRINCIPAUX

@app.get("/", response_model=Dict[str, Any])
async def racine():
    """
    Endpoint racine avec informations sur l'API.
    """
    return {
        "service": "G√©n√©rateur de Noms de Domaine LLM",
        "version": "1.0.0",
        "status": "operational",
        "timestamp": time.time(),
        "documentation": "/docs",
        "health_check": "/health"
    }


@app.get("/health", response_model=ReponseStatut)
async def verification_sante():
    """
    V√©rification de l'√©tat de sant√© des services.
    """
    global generateur, evaluateur, garde_fous, statistiques_api
    
    services_status = {}
    status_global = "healthy"
    
    # V√©rifier le g√©n√©rateur
    try:
        if generateur is not None:
            info_modele = generateur.obtenir_info_modele()
            services_status["generateur"] = "operational"
        else:
            services_status["generateur"] = "unavailable"
            status_global = "degraded"
    except Exception:
        services_status["generateur"] = "error"
        status_global = "degraded"
    
    # V√©rifier l'√©valuateur
    try:
        if evaluateur is not None:
            info_evaluateur = evaluateur.obtenir_info_evaluateur()
            services_status["evaluateur"] = "operational"
        else:
            services_status["evaluateur"] = "unavailable"
            status_global = "degraded"
    except Exception:
        services_status["evaluateur"] = "error"
        status_global = "degraded"
    
    # V√©rifier les garde-fous
    try:
        if garde_fous is not None:
            services_status["garde_fous"] = "operational"
        else:
            services_status["garde_fous"] = "unavailable"
    except Exception:
        services_status["garde_fous"] = "error"
    
    return ReponseStatut(
        status=status_global,
        version="1.0.0",
        timestamp=time.time(),
        services=services_status,
        statistiques={
            "total_requests": statistiques_api["total_requests"],
            "successful_generations": statistiques_api["successful_generations"],
            "blocked_requests": statistiques_api["blocked_requests"],
            "error_requests": statistiques_api["error_requests"],
            "uptime_seconds": time.time() - statistiques_api["start_time"]
        }
    )


@app.post("/generate", response_model=ReponseGeneration)
async def generer_noms_domaine(requete: RequeteGeneration):
    """
    G√©n√®re des suggestions de noms de domaine bas√©es sur une description business.
    
    - **business_description**: Description de l'activit√© (5-500 caract√®res)
    - **nombre_suggestions**: Nombre de suggestions souhait√©es (1-10)
    - **style**: Style de g√©n√©ration (professionnel, cr√©atif, moderne, classique, court)
    - **avec_filtrage**: Activer les garde-fous de s√©curit√©
    
    Retourne une liste de suggestions avec scores de confiance.
    """
    global generateur, statistiques_api
    
    if generateur is None:
        statistiques_api["error_requests"] += 1
        raise HTTPException(
            status_code=503,
            detail="Service de g√©n√©ration indisponible"
        )
    
    try:
        api_logger.info(f"G√©n√©ration demand√©e: {requete.business_description[:50]}...")
        
        # G√©n√©rer les suggestions
        resultats = generateur.generer_suggestions(
            description_business=requete.business_description,
            nombre_suggestions=requete.nombre_suggestions,
            style=requete.style.value,
            avec_filtrage=requete.avec_filtrage
        )
        
        # Traiter la r√©ponse selon le statut
        if resultats["status"] == "success":
            statistiques_api["successful_generations"] += 1
            
            # Convertir en format de r√©ponse
            suggestions = [
                SuggestionDomaine(
                    domaine=sug["domaine"],
                    confidence=sug["confidence"],
                    explication=sug.get("explication", "")
                )
                for sug in resultats["suggestions"]
            ]
            
            metadata = MetadataGeneration(**resultats["metadata"])
            
            return ReponseGeneration(
                suggestions=suggestions,
                status="success",
                message="G√©n√©ration r√©ussie",
                metadata=metadata,
                rapport_securite=resultats.get("rapport_securite")
            )
            
        elif resultats["status"] == "blocked":
            statistiques_api["blocked_requests"] += 1
            
            return ReponseGeneration(
                suggestions=[],
                status="blocked",
                message=resultats.get("message", "Contenu bloqu√© par les garde-fous"),
                rapport_securite=resultats.get("details_filtrage")
            )
            
        else:
            statistiques_api["error_requests"] += 1
            
            return ReponseGeneration(
                suggestions=[],
                status="error",
                message=resultats.get("message", "Erreur lors de la g√©n√©ration")
            )
            
    except Exception as e:
        statistiques_api["error_requests"] += 1
        api_logger.error(f"Erreur lors de la g√©n√©ration: {e}")
        
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de la g√©n√©ration: {str(e)}"
        )


@app.post("/evaluate", response_model=ReponseEvaluation)
async def evaluer_noms_domaine(requete: RequeteEvaluation):
    """
    √âvalue la qualit√© d'une liste de noms de domaine.
    
    - **business_description**: Description de l'activit√© business
    - **domaines**: Liste des noms de domaine √† √©valuer (1-10)
    - **avec_details**: Inclure les d√©tails et recommandations
    
    Retourne des scores d√©taill√©s pour chaque crit√®re d'√©valuation.
    """
    global evaluateur, statistiques_api
    
    if evaluateur is None:
        raise HTTPException(
            status_code=503,
            detail="Service d'√©valuation indisponible"
        )
    
    try:
        api_logger.info(f"√âvaluation demand√©e: {len(requete.domaines)} domaines")
        
        # √âvaluer les domaines
        resultats = evaluateur.evaluer_suggestions(
            description_business=requete.business_description,
            suggestions_domaines=requete.domaines,
            avec_details=requete.avec_details
        )
        
        if resultats["status"] == "success":
            # Convertir en format de r√©ponse
            evaluations = [
                EvaluationDomaine(**eval_data)
                for eval_data in resultats["evaluations"]
            ]
            
            statistiques = StatistiquesEvaluation(**resultats["statistiques"])
            
            return ReponseEvaluation(
                status="success",
                evaluations=evaluations,
                statistiques=statistiques,
                recommandations=resultats.get("recommandations"),
                metadata=resultats.get("metadata")
            )
        else:
            raise HTTPException(
                status_code=500,
                detail=resultats.get("message", "Erreur lors de l'√©valuation")
            )
            
    except HTTPException:
        raise
    except Exception as e:
        api_logger.error(f"Erreur lors de l'√©valuation: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de l'√©valuation: {str(e)}"
        )


@app.get("/criteres", response_model=Dict[str, str])
async def obtenir_criteres_evaluation():
    """
    Retourne la liste des crit√®res d'√©valuation utilis√©s.
    """
    global evaluateur
    
    if evaluateur is None:
        raise HTTPException(
            status_code=503,
            detail="Service d'√©valuation indisponible"
        )
    
    try:
        return evaluateur.obtenir_criteres_evaluation()
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de la r√©cup√©ration des crit√®res: {str(e)}"
        )


@app.post("/batch/generate")
async def generer_batch(requetes: List[RequeteGeneration]):
    """
    G√©n√®re des suggestions pour plusieurs descriptions en lot.
    
    - **requetes**: Liste de requ√™tes de g√©n√©ration (max 10)
    
    Retourne les r√©sultats pour chaque requ√™te.
    """
    global generateur
    
    if generateur is None:
        raise HTTPException(
            status_code=503,
            detail="Service de g√©n√©ration indisponible"
        )
    
    if len(requetes) > 10:
        raise HTTPException(
            status_code=400,
            detail="Maximum 10 requ√™tes en lot"
        )
    
    try:
        api_logger.info(f"G√©n√©ration en lot: {len(requetes)} requ√™tes")
        
        descriptions = [req.business_description for req in requetes]
        
        # Utiliser les param√®tres de la premi√®re requ√™te pour toutes
        params = {
            "nombre_suggestions": requetes[0].nombre_suggestions,
            "style": requetes[0].style.value,
            "avec_filtrage": requetes[0].avec_filtrage
        }
        
        resultats = generateur.generer_batch(descriptions, **params)
        
        return {
            "status": "success",
            "nombre_requetes": len(requetes),
            "resultats": resultats,
            "timestamp": time.time()
        }
        
    except Exception as e:
        api_logger.error(f"Erreur lors de la g√©n√©ration en lot: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de la g√©n√©ration en lot: {str(e)}"
        )


# Configuration personnalis√©e de la documentation
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    
    openapi_schema = get_openapi(
        title="G√©n√©rateur de Noms de Domaine LLM",
        version="1.0.0",
        description="""
        ## API Intelligence Artificielle pour Noms de Domaine
        
        Cette API utilise des mod√®les de langage avanc√©s pour g√©n√©rer et √©valuer 
        automatiquement des suggestions de noms de domaine pertinents.
        """,
        routes=app.routes,
    )
    
    # Ajouter des exemples personnalis√©s
    openapi_schema["info"]["x-logo"] = {
        "url": "https://via.placeholder.com/200x100?text=Domain+AI"
    }
    
    app.openapi_schema = openapi_schema
    return app.openapi_schema


app.openapi = custom_openapi


# Point d'entr√©e pour le d√©veloppement
if __name__ == "__main__":
    import uvicorn
    
    print("üöÄ D√©marrage du serveur de d√©veloppement...")
    print("üìö Documentation disponible sur: http://localhost:8000/docs")
    print("üîç Alternative ReDoc: http://localhost:8000/redoc")
    print("üí° Sant√© de l'API: http://localhost:8000/health")
    
    # Configuration du serveur
    uvicorn.run(
        "main:app",
        host=os.getenv("API_HOST", "0.0.0.0"),
        port=int(os.getenv("API_PORT", "8000")),
        reload=os.getenv("DEBUG", "True").lower() == "true",
        log_level="info"
    )